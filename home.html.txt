import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, query, where, doc, deleteDoc } from 'firebase/firestore';

// Lucide React Icons
import { Utensils, ChefHat, Salad, Loader2, Info, PlusCircle, Trash2, Save, Youtube, Image, Globe, Languages, Star } from 'lucide-react';

function App() {
  const [mealType, setMealType] = useState('Dinner');
  const [ingredients, setIngredients] = useState('');
  const [dietaryRestrictions, setDietaryRestrictions] = useState('');
  const [country, setCountry] = useState('');
  const [language, setLanguage] = useState(''); 
  
  const [generatedRecipe, setGeneratedRecipe] = useState(null); // { content: string, youtubeLinks: string[], imageUrl: string }
  const [loading, setLoading] = useState(false); // For text generation
  const [imageLoading, setImageLoading] = useState(false); // For image generation
  const [error, setError] = useState(null);

  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);

  const [savedRecipes, setSavedRecipes] = useState([]);
  const [savingRecipe, setSavingRecipe] = useState(false);
  const [recipesLoading, setRecipesLoading] = useState(true);
  const [recipesError, setRecipesError] = useState(null);

  // State for Rate Us section
  const [rating, setRating] = useState(0);
  const [feedbackComment, setFeedbackComment] = useState('');
  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);

  // Firebase Initialization and Authentication
  useEffect(() => {
    let firebaseAppInstance;
    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
      const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

      firebaseAppInstance = initializeApp(firebaseConfig);
      const firestoreDb = getFirestore(firebaseAppInstance);
      const firebaseAuth = getAuth(firebaseAppInstance);

      setDb(firestoreDb);
      setAuth(firebaseAuth);

      const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          try {
            if (initialAuthToken) {
              await signInWithCustomToken(firebaseAuth, initialAuthToken);
            } else {
              await signInAnonymously(firebaseAuth);
            }
            setUserId(firebaseAuth.currentUser?.uid || crypto.randomUUID());
          } catch (authError) {
            console.error("Firebase authentication failed:", authError);
            setUserId(crypto.randomUUID());
          }
        }
        setIsAuthReady(true);
      });

      return () => unsubscribe();
    } catch (err) {
      console.error("Failed to initialize Firebase:", err);
      setError("Failed to initialize app services.");
      setIsAuthReady(true);
    }
  }, []);

  // Fetch saved recipes when auth is ready and userId is available
  useEffect(() => {
    if (!isAuthReady || !db || !userId) {
      return;
    }

    setRecipesLoading(true);
    setRecipesError(null);

    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const recipesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/savedRecipes`);
      const q = query(recipesCollectionRef);

      const unsubscribe = onSnapshot(q, (snapshot) => {
        const fetchedRecipes = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        setSavedRecipes(fetchedRecipes);
        setRecipesLoading(false);
      }, (err) => {
        console.error("Error fetching saved recipes:", err);
        setRecipesError("Failed to load your saved recipes.");
        setRecipesLoading(false);
      });

      return () => unsubscribe();
    } catch (err) {
      console.error("Failed to set up recipes listener:", err);
      setRecipesError("Failed to set up recipes listener.");
      setRecipesLoading(false);
    }
  }, [isAuthReady, db, userId]);

  const handleGenerateRecipe = async () => {
    if (!mealType && !ingredients.trim()) {
      setError("Please select a meal type or enter some ingredients.");
      setGeneratedRecipe(null);
      return;
    }

    setLoading(true);
    setImageLoading(true); // Start image loading immediately
    setError(null);
    setGeneratedRecipe(null);

    let recipeContent = null;
    let youtubeLinks = [];
    let imageUrl = null;
    let recipeName = ''; // To store the extracted recipe name

    // --- Step 1: Generate Recipe Text and YouTube Links ---
    try {
      let prompt = `Generate a detailed recipe for a "${mealType}" meal.`;
      if (ingredients.trim()) {
        prompt += ` Use the following main ingredients: ${ingredients.trim()}.`;
      }
      if (dietaryRestrictions.trim()) {
        prompt += ` It must adhere to these dietary restrictions: ${dietaryRestrictions.trim()}.`;
      }
      if (country.trim()) {
        prompt += ` It should be typical of ${country} cuisine.`;
      }
      prompt += ` Include:
      1. Recipe Name
      2. Ingredients List (with quantities)
      3. Instructions (step-by-step)
      4. Prep Time
      5. Cook Time
      6. Servings
      IMPORTANT: At the very end of the recipe, provide at least one relevant **standard YouTube video link** (e.g., https://www.youtube.com/watch?v=VIDEO_ID or https://youtu.be/VIDEO_ID) for this recipe or similar cooking techniques. Prioritize videos in ${language || 'any'} language, ideally from creators in ${country || 'any'} country. If multiple, list them. Each link MUST be on a new line, prefixed with "YouTube Link: ". If no direct recipe video is found, provide a general cooking technique video or a search link (e.g., https://www.youtube.com/results?search_query=YOUR_SEARCH_TERMS).
      Make sure the response is well-formatted and easy to read.`;

      let chatHistory = [];
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });

      const payload = { contents: chatHistory };
      const apiKey = ""; // Canvas will automatically provide this at runtime

      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const fullText = result.candidates[0].content.parts[0].text;

        // Extract Recipe Name
        const recipeNameMatch = fullText.match(/Recipe Name: (.+?)\n/i);
        if (recipeNameMatch && recipeNameMatch[1]) {
          recipeName = recipeNameMatch[1].trim();
        } else {
          // Fallback recipe name if not found
          recipeName = `${mealType} with ${ingredients}`;
        }

        const youtubeLinkRegex = /YouTube Link: (https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/results\?search_query=)[a-zA-Z0-9_-]{11}(?:\S+)?|https?:\/\/(?:www\.)?youtube\.com\/results\?search_query=[^ \n]+)/g;
        let match;
        while ((match = youtubeLinkRegex.exec(fullText)) !== null) {
          let extractedLink = match[1].replace(/^http:\/\//i, 'https://');
          youtubeLinks.push(extractedLink);
        }

        // If no links were extracted by the regex, create a fallback search link
        if (youtubeLinks.length === 0) {
          const searchKeywords = `${recipeName} recipe ${country} ${language} cooking tutorial`.trim();
          youtubeLinks.push(`https://www.youtube.com/results?search_query=${encodeURIComponent(searchKeywords)}`);
          console.log("Fallback Youtube link generated:", youtubeLinks[0]);
        }
        
        recipeContent = fullText.replace(youtubeLinkRegex, '').trim();
      } else {
        recipeContent = "Could not generate a recipe. Please try different parameters.";
        // Fallback if no content is generated at all
        const searchKeywords = `${mealType} recipe ${ingredients} ${country} ${language} cooking tutorial`.trim();
        youtubeLinks.push(`https://www.youtube.com/results?search_query=${encodeURIComponent(searchKeywords)}`);
        console.log("Fallback Youtube link generated (no content):", youtubeLinks[0]);
      }
    } catch (err) {
      console.error("Error fetching recipe text:", err);
      setError(`Failed to get recipe information: ${err.message}.`);
      setLoading(false); // Stop loading for text if error
      setImageLoading(false); // Stop image loading too
      return; // Exit if text generation fails
    } finally {
      setLoading(false); // Stop loading for text generation
    }

    // --- Step 2: Generate Image for the Recipe ---
    try {
      // Use the extracted recipeName for the image prompt
      let imagePrompt = `A delicious and visually appealing image of "${recipeName}".`;
      if (country.trim()) {
        imagePrompt += ` It should be typical of ${country} cuisine.`;
      }
      imagePrompt += ` Focus on fresh ingredients and an appetizing presentation. High quality food photography.`;

      const imagePayload = { instances: { prompt: imagePrompt }, parameters: { "sampleCount": 1} };
      const imageApiKey = ""; // Canvas will automatically provide this at runtime
      const imageApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${imageApiKey}`;

      const imageResponse = await fetch(imageApiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(imagePayload)
      });

      if (!imageResponse.ok) {
        const imageErrorData = await imageResponse.json();
        throw new Error(`Image API error: ${imageResponse.status} - ${imageErrorData.error?.message || 'Unknown error'}`);
      }

      const imageResult = await imageResponse.json();

      if (imageResult.predictions && imageResult.predictions.length > 0 && imageResult.predictions[0].bytesBase64Encoded) {
        imageUrl = `data:image/png;base64,${imageResult.predictions[0].bytesBase64Encoded}`;
      } else {
        console.warn("No image generated or unexpected image response structure.");
        imageUrl = "https://placehold.co/600x400/E0E0E0/616161?text=No+Image"; // Placeholder
      }
    } catch (err) {
      console.error("Error generating image:", err);
      setError((prev) => (prev ? prev + ` Also, image generation failed: ${err.message}.` : `Image generation failed: ${err.message}.`));
      imageUrl = "https://placehold.co/600x400/E0E0E0/616161?text=Image+Error"; // Placeholder on error
    } finally {
      setImageLoading(false); // Stop image loading
    }

    // Set the full generated recipe data
    setGeneratedRecipe({
      content: recipeContent,
      youtubeLinks: youtubeLinks,
      imageUrl: imageUrl,
      recipeName: recipeName // Store the extracted recipe name
    });
  };

  const handleSaveRecipe = async () => {
    if (!generatedRecipe || !generatedRecipe.content) {
      setError("No recipe to save yet!");
      return;
    }
    if (!db || !userId) {
      setError("App services not ready. Please wait.");
      return;
    }

    setSavingRecipe(true);
    setError(null);

    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const recipesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/savedRecipes`);
      await addDoc(recipesCollectionRef, {
        recipeContent: generatedRecipe.content,
        youtubeLinks: generatedRecipe.youtubeLinks,
        imageUrl: generatedRecipe.imageUrl,
        createdAt: new Date().toISOString(),
        mealType: mealType,
        ingredients: ingredients,
        dietaryRestrictions: dietaryRestrictions,
        country: country,
        language: language,
        recipeName: generatedRecipe.recipeName || 'Untitled Recipe', // Save the extracted recipe name
      });
      setGeneratedRecipe(null); // Clear generated recipe after saving
    } catch (err) {
      console.error("Error saving recipe:", err);
      setError("Failed to save recipe. Please try again.");
    } finally {
      setSavingRecipe(false);
    }
  };

  const handleDeleteRecipe = async (recipeId) => {
    if (!db || !userId) {
      setError("App services not ready. Please wait.");
      return;
    }

    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const recipeDocRef = doc(db, `artifacts/${appId}/users/${userId}/savedRecipes`, recipeId);
      await deleteDoc(recipeDocRef);
    } catch (err) {
      console.error("Error deleting recipe:", err);
      setError("Failed to delete recipe. Please try again.");
    }
  };

  const handleRatingClick = (starValue) => {
    setRating(starValue);
    setFeedbackSubmitted(false); // Reset feedback status on new rating
  };

  const handleSubmitFeedback = () => {
    if (rating === 0) {
      setError("Please select a star rating before submitting feedback.");
      return;
    }
    console.log("Feedback Submitted:", {
      rating: rating,
      comment: feedbackComment,
      userId: userId,
      timestamp: new Date().toISOString()
    });
    setFeedbackSubmitted(true);
    setError(null); // Clear any previous errors
    // In a real app, you would send this to Firestore or another backend service
    // For now, we'll just log it and show a confirmation.
  };

  const countries = [
    { value: '', label: 'Any Country' },
    { value: 'United States', label: 'United States' },
    { value: 'Mexico', label: 'Mexico' },
    { value: 'Italy', label: 'Italy' },
    { value: 'France', label: 'France' },
    { value: 'China', label: 'China' },
    { value: 'India', label: 'India' },
    { value: 'Japan', label: 'Japan' },
    { value: 'Thailand', label: 'Thailand' },
    { value: 'Greece', label: 'Greece' },
    { value: 'Morocco', label: 'Morocco' },
    { value: 'Brazil', label: 'Brazil' },
    { value: 'Pakistan', label: 'Pakistan' },
    { value: 'Spain', label: 'Spain' },
    { value: 'Germany', label: 'Germany' },
    { value: 'United Kingdom', label: 'United Kingdom' },
    { value: 'Canada', label: 'Canada' },
    { value: 'Australia', label: 'Australia' },
    { value: 'South Korea', label: 'South Korea' },
    { value: 'Vietnam', label: 'Vietnam' },
    { value: 'Egypt', label: 'Egypt' },
    { value: 'Argentina', label: 'Argentina' },
    { value: 'Nigeria', label: 'Nigeria' },
    { value: 'Turkey', label: 'Turkey' },
    { value: 'Russia', label: 'Russia' },
  ];

  const languages = [
    { value: '', label: 'Any Language' },
    { value: 'English', label: 'English' },
    { value: 'Spanish', label: 'Spanish' },
    { value: 'Italian', label: 'Italian' },
    { value: 'French', label: 'French' },
    { value: 'Mandarin', label: 'Mandarin (Chinese)' },
    { value: 'Hindi', label: 'Hindi' },
    { value: 'Japanese', label: 'Japanese' },
    { value: 'Thai', label: 'Thai' },
    { value: 'Greek', label: 'Greek' },
    { value: 'Arabic', label: 'Arabic' },
    { value: 'Portuguese', label: 'Portuguese' },
    { value: 'Urdu', label: 'Urdu' },
    { value: 'German', label: 'German' },
    { value: 'Korean', label: 'Korean' },
    { value: 'Vietnamese', label: 'Vietnamese' },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-100 to-yellow-100 flex flex-col items-center p-4 font-inter text-gray-800">
      {/* Header */}
      <header className="w-full max-w-3xl bg-white p-6 rounded-xl shadow-lg mb-8 mt-4 flex flex-col items-center">
        <h1 className="text-4xl font-extrabold text-orange-700 mb-2 flex items-center gap-3">
          <Utensils size={40} className="text-yellow-500" /> FlavorForge
        </h1>
        <p className="text-lg text-gray-600 text-center">Your Personalized Meal Planner & Recipe Generator</p>
        {userId && isAuthReady && (
          <p className="text-sm text-gray-500 mt-2">
            User ID: <span className="font-mono bg-gray-100 px-2 py-1 rounded-md text-xs break-all">{userId}</span>
          </p>
        )}
      </header>

      {/* Recipe Generation Section */}
      <section className="w-full max-w-3xl bg-white p-6 rounded-xl shadow-lg mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4 flex items-center gap-2">
          <ChefHat size={24} className="text-orange-600" /> Generate a New Recipe
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label htmlFor="mealType" className="block text-sm font-medium text-gray-700 mb-1">Meal Type</label>
            <select
              id="mealType"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-200"
              value={mealType}
              onChange={(e) => setMealType(e.target.value)}
              disabled={!isAuthReady}
            >
              <option value="Breakfast">Breakfast</option>
              <option value="Lunch">Lunch</option>
              <option value="Dinner">Dinner</option>
              <option value="Snack">Snack</option>
              <option value="Dessert">Dessert</option>
            </select>
          </div>
          <div>
            <label htmlFor="ingredients" className="block text-sm font-medium text-gray-700 mb-1">Main Ingredients (comma-separated)</label>
            <input
              type="text"
              id="ingredients"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-200"
              placeholder="e.g., chicken, broccoli, rice"
              value={ingredients}
              onChange={(e) => setIngredients(e.target.value)}
              disabled={!isAuthReady}
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label htmlFor="dietaryRestrictions" className="block text-sm font-medium text-gray-700 mb-1">Dietary Restrictions (optional)</label>
            <input
              type="text"
              id="dietaryRestrictions"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-200"
              placeholder="e.g., vegetarian, gluten-free, low-carb"
              value={dietaryRestrictions}
              onChange={(e) => setDietaryRestrictions(e.target.value)}
              disabled={!isAuthReady}
            />
          </div>
          <div>
            <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-1">Country Cuisine (optional)</label>
            <select
              id="country"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-200"
              value={country}
              onChange={(e) => setCountry(e.target.value)}
              disabled={!isAuthReady}
            >
              {countries.map((c) => (
                <option key={c.value} value={c.value}>{c.label}</option>
              ))}
            </select>
          </div>
        </div>
        <div className="mb-6">
          <label htmlFor="language" className="block text-sm font-medium text-gray-700 mb-1">Video Language (optional)</label>
          <select
            id="language"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-200"
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            disabled={!isAuthReady}
          >
            {languages.map((l) => (
              <option key={l.value} value={l.value}>{l.label}</option>
            ))}
          </select>
        </div>
        <button
          onClick={handleGenerateRecipe}
          className="w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 px-6 rounded-lg shadow-md flex items-center justify-center gap-2 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={loading || imageLoading || !isAuthReady || (!mealType && !ingredients.trim())}
        >
          {(loading || imageLoading) ? (
            <Loader2 className="animate-spin" size={20} />
          ) : (
            <Salad size={20} />
          )}
          Generate Recipe
        </button>

        {/* Loading and Error Messages */}
        {(loading || imageLoading) && (
          <div className="mt-4 flex items-center justify-center text-orange-600 animate-pulse">
            <Loader2 className="animate-spin mr-2" size={20} /> {loading ? "Crafting your recipe..." : "Generating image..."}
          </div>
        )}
        {error && (
          <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg flex items-center gap-2">
            <Info size={20} /> {error}
          </div>
        )}

        {/* Generated Recipe Display */}
        {generatedRecipe && (
          <div className="mt-6 p-5 bg-orange-50 border border-orange-200 rounded-lg shadow-inner">
            <h3 className="text-xl font-semibold text-orange-700 mb-3 flex items-center justify-between">
              <span><ChefHat size={20} className="inline mr-2" /> Your Generated Recipe</span>
              <button
                onClick={handleSaveRecipe}
                className="bg-blue-500 hover:bg-blue-600 text-white text-sm font-semibold py-2 px-4 rounded-lg flex items-center gap-1 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={savingRecipe || !isAuthReady}
              >
                {savingRecipe ? <Loader2 className="animate-spin" size={16} /> : <Save size={16} />} Save Recipe
              </button>
            </h3>

            {generatedRecipe.imageUrl && (
              <div className="mb-4 text-center">
                <img
                  src={generatedRecipe.imageUrl}
                  alt="Generated Recipe"
                  className="w-full h-auto max-h-80 object-cover rounded-lg shadow-md mx-auto"
                  onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/600x400/E0E0E0/616161?text=Image+Failed+to+Load"; }}
                />
              </div>
            )}

            <div className="prose max-w-none text-gray-700 leading-relaxed" dangerouslySetInnerHTML={{ __html: generatedRecipe.content.replace(/\n/g, '<br/>') }} />

            {generatedRecipe.youtubeLinks && generatedRecipe.youtubeLinks.length > 0 && (
              <div className="mt-4 pt-4 border-t border-orange-200">
                <h4 className="text-lg font-semibold text-orange-700 mb-2 flex items-center gap-2">
                  <Youtube size={20} className="text-red-500" /> Related Videos
                </h4>
                <div className="flex flex-wrap gap-2">
                  {generatedRecipe.youtubeLinks.map((link, index) => {
                    return (
                      <a
                        key={index}
                        href={link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1 px-3 py-1 bg-red-600 text-white rounded-full text-sm font-medium hover:bg-red-700 transition duration-200 shadow-sm"
                      >
                        <Youtube size={16} /> {link.includes("youtube.com/results?search_query=") ? "Search on YouTube" : "Watch Video"}
                      </a>
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        )}
      </section>

      {/* Saved Recipes Section */}
      <section className="w-full max-w-3xl bg-white p-6 rounded-xl shadow-lg mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4 flex items-center gap-2">
          <Save size={24} className="text-blue-600" /> My Saved Recipes
        </h2>

        {recipesLoading && (
          <div className="mt-4 flex items-center justify-center text-blue-600 animate-pulse">
            <Loader2 className="animate-spin mr-2" size={20} /> Loading saved recipes...
          </div>
        )}
        {recipesError && (
          <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg flex items-center gap-2">
            <Info size={20} /> {recipesError}
          </div>
        )}

        {savedRecipes.length === 0 && !recipesLoading && !recipesError && (
          <p className="text-gray-500 italic text-center">No recipes saved yet. Generate one and click 'Save Recipe'!</p>
        )}

        <div className="space-y-4">
          {savedRecipes.map((recipe) => (
            <div key={recipe.id} className="bg-blue-50 p-4 rounded-lg border border-blue-200 shadow-sm">
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-lg font-semibold text-blue-700">
                  {/* Use the saved recipeName if available, otherwise try to extract from content */}
                  {recipe.recipeName || (recipe.recipeContent ? recipe.recipeContent.split('\n')[0].replace('Recipe Name: ', '').replace(/<br\/>/g, '') : 'Untitled Recipe')}
                </h3>
                <button
                  onClick={() => handleDeleteRecipe(recipe.id)}
                  className="text-red-500 hover:text-red-700 p-1 rounded-full transition duration-200"
                  title="Delete Recipe"
                >
                  <Trash2 size={20} />
                </button>
              </div>

              {recipe.country && (
                <p className="text-sm text-gray-600 mb-2 flex items-center gap-1">
                  <Globe size={16} className="text-green-600" />
                  Cuisine: <span className="font-medium">{recipe.country}</span>
                </p>
              )}
              {recipe.language && (
                <p className="text-sm text-gray-600 mb-2 flex items-center gap-1">
                  <Languages size={16} className="text-purple-600" />
                  Video Language: <span className="font-medium">{recipe.language}</span>
                </p>
              )}

              {recipe.imageUrl && (
                <div className="mb-4 text-center">
                  <img
                    src={recipe.imageUrl}
                    alt="Saved Recipe"
                    className="w-full h-auto max-h-60 object-cover rounded-lg shadow-md mx-auto"
                    onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/600x400/E0E0E0/616161?text=Image+Failed+to+Load"; }}
                  />
                </div>
              )}

              <div className="prose max-w-none text-gray-700 text-sm leading-relaxed" dangerouslySetInnerHTML={{ __html: recipe.recipeContent.replace(/\n/g, '<br/>') }} />

              {recipe.youtubeLinks && recipe.youtubeLinks.length > 0 && (
                <div className="mt-4 pt-4 border-t border-blue-200">
                  <h4 className="text-base font-semibold text-blue-700 mb-2 flex items-center gap-2">
                    <Youtube size={18} className="text-red-500" /> Related Videos
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {recipe.youtubeLinks.map((link, index) => {
                      return (
                        <a
                          key={index}
                          href={link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="inline-flex items-center gap-1 px-3 py-1 bg-red-600 text-white rounded-full text-sm font-medium hover:bg-red-700 transition duration-200 shadow-sm"
                        >
                          <Youtube size={16} /> {link.includes("youtube.com/results?search_query=") ? "Search on YouTube" : "Watch Video"}
                        </a>
                      );
                    })}
                  </div>
                </div>
              )}
              <p className="text-xs text-gray-500 mt-2">Saved: {new Date(recipe.createdAt).toLocaleDateString()}</p>
            </div>
          ))}
        </div>
      </section>

      {/* Rate Us Section */}
      <section className="w-full max-w-3xl bg-white p-6 rounded-xl shadow-lg mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4 flex items-center gap-2">
          <Star size={24} className="text-yellow-500" /> Rate Our App
        </h2>
        <p className="text-gray-600 mb-4">We'd love to hear your feedback!</p>
        
        <div className="flex items-center gap-1 mb-4">
          {[1, 2, 3, 4, 5].map((starValue) => (
            <Star
              key={starValue}
              size={32}
              className={`cursor-pointer transition-colors duration-200 ${
                starValue <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
              }`}
              onClick={() => handleRatingClick(starValue)}
            />
          ))}
        </div>

        <textarea
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 transition duration-200 mb-4"
          rows="4"
          placeholder="Share your thoughts or suggestions..."
          value={feedbackComment}
          onChange={(e) => { setFeedbackComment(e.target.value); setFeedbackSubmitted(false); }}
        ></textarea>

        <button
          onClick={handleSubmitFeedback}
          className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-6 rounded-lg shadow-md flex items-center justify-center gap-2 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={!isAuthReady || feedbackSubmitted || rating === 0}
        >
          {feedbackSubmitted ? (
            <span className="flex items-center gap-2"><Info size={20} /> Feedback Submitted!</span>
          ) : (
            <span className="flex items-center gap-2"><Star size={20} /> Submit Feedback</span>
          )}
        </button>
        {feedbackSubmitted && (
          <p className="mt-2 text-sm text-green-700 text-center">Thank you for your feedback!</p>
        )}
        {error && rating === 0 && ( // Only show error if rating is 0 when submitting
          <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg flex items-center gap-2">
            <Info size={20} /> {error}
          </div>
        )}
      </section>

      {/* Footer */}
      <footer className="w-full max-w-3xl text-center text-gray-500 text-sm py-4">
        <p>&copy; 2025 FlavorForge. All rights reserved.</p>
        <p className="mt-1">Where manufactured by Abdul Hakeem</p>
      </footer>
    </div>
  );
}

export default App;
